(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{362:function(t,s,a){t.exports=a.p+"assets/img/2019-05-24-22-52-16.6ed59876.png"},363:function(t,s,a){t.exports=a.p+"assets/img/2019-05-24-22-53-27.ba11ff47.png"},364:function(t,s,a){t.exports=a.p+"assets/img/2020-03-06-14-24-36.1c5a4aa1.png"},365:function(t,s,a){t.exports=a.p+"assets/img/2020-03-06-15-15-35.d7560080.png"},366:function(t,s,a){t.exports=a.p+"assets/img/2020-03-06-15-31-17.bc5fb359.png"},367:function(t,s,a){t.exports=a.p+"assets/img/2020-03-06-15-33-28.44fa9511.png"},368:function(t,s,a){t.exports=a.p+"assets/img/2020-03-12-14-06-05.fcc54df9.png"},369:function(t,s,a){t.exports=a.p+"assets/img/2020-03-12-14-27-21.1291b592.png"},370:function(t,s,a){t.exports=a.p+"assets/img/2020-03-12-14-57-53.2265cd72.png"},371:function(t,s,a){t.exports=a.p+"assets/img/2020-03-25-16-09-06.43723ca4.png"},372:function(t,s,a){t.exports=a.p+"assets/img/2020-03-25-16-12-53.e7b01325.png"},373:function(t,s,a){t.exports=a.p+"assets/img/2020-03-25-17-27-13.7a72486b.png"},374:function(t,s,a){t.exports=a.p+"assets/img/2020-03-12-16-49-17.a1602900.png"},375:function(t,s,a){t.exports=a.p+"assets/img/2020-03-25-18-00-27.014d1283.png"},691:function(t,s,a){"use strict";a.r(s);var n=a(38),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_1-node-js核心概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-node-js核心概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.Node.js核心概念")]),t._v(" "),n("h2",{attrs:{id:"_1-1-node和js的关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-node和js的关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1.Node和JS的关系")]),t._v(" "),n("p",[t._v("Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装")]),t._v(" "),n("p",[t._v("Node.js官网: "),n("a",{attrs:{href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://nodejs.org/en/"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("官网中文指南: "),n("a",{attrs:{href:"https://nodejs.org/zh-cn/docs/guides/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://nodejs.org/zh-cn/docs/guides/"),n("OutboundLink")],1)]),t._v(" "),n("p",[n("img",{attrs:{src:a(362),alt:""}})]),t._v(" "),n("p",[t._v("Node.js、DOM、BOM、ECMAScript的关系图：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(363),alt:""}})]),t._v(" "),n("p",[t._v("总结重点：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" ECMAScript是JavaScript的标准\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" JavaScript在浏览器端依赖于"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("和"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BOM")]),t._v("提供的接口，有了这些接口可以操作网页中的元素和浏览器\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" JavaScript在后端也需要运行环境那就是Node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js，它扩展了一些模块，让js有后端开发的能力\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" 相关的规范组织 "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("W3C")]),t._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ECMA")]),t._v("、CommonJs\n\n")])])]),n("h2",{attrs:{id:"_1-2-进程和线程概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-进程和线程概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2.进程和线程概念")]),t._v(" "),n("h3",{attrs:{id:"_1-2-1-进程的概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-进程的概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2.1.进程的概念")]),t._v(" "),n("p",[t._v("操作系统中可以同时存在几个相互独立的程序，他们交叉的运行，并且共享资源，这就引发了几个问题，例如：资源之间的竞争、程序之间的协作和协同、程序之间的通信等，要解决这些问题，因此，引入了进程(Process)这个概念，进程是用来描述程序执行的动态特征的，简单的说进（进可以理解为正在进行）程就是一个正在执行中的程序，更专业的定义是：一个具有一定功能的程序，在一个数据集合上的一次动态执行过程，在同一时间内，可以同时运行多个进程")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("进程和程序的区别：\n1、进程是一个动态的实体，程序是一个静态的实体\n2、进程是暂时的，程序是永久的\n3、程序执行多次，可以产生多个进程，一个进程也可以调用多个程序\n4、进程包括程序、数据和进程控制块")])]),t._v(" "),n("p",[t._v("一个进程一般包括以下几个内容：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("、一段程序代码\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("、当前活动、当前状态\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("、相关数据（局部变量、函数返回参数、返回地址、申请的动态内存、全局变量等）\n")])])]),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("总结：\n1、进程具有动态性，是一个正在执行的程序\n2、进程具有并发性，多个进程实体同时存在于内存中，并且在一段时间内同时运行，这是比较重要的特征，并发性可以理解为就是同一时间内有多个进程运行的一种状态\n3、进程具有独立性，进程是一个能独立运行、独立分配资源和接受调度的基本单位\n4、进程具有异步性，因为进程具有独立性，进程可以按照各自独立的、不可预知的速度向前推进")])]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("注意：并发和并行\n并发是同一时间应对多件事情的能力\n并行是同一时间动手做多件事情的能力\n--《七周七并发模型》\n换句话说就是并发表示同时有很多事情要做，你可以并行处理也可以串行处理")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(364),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"_1-2-2-线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-线程","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2.2.线程")]),t._v(" "),n("p",[t._v("前面我们介绍了进程的特点，可以知道，进程是拥有资源的独立单位，又是可独立调度和分派的基本单位，因为进程是资源的拥有者，在进程创建、撤销、调度切换时，系统的开销比较大，因此，进程的数量不宜过多，切换的频率不宜太快，这样限制了并发的程度，而这并不满足操作系统的设计目标，操作系统希望提高并发度、减少系统开销，因此，需要把进程的两个基本属性分开，对拥有资源对基本单位，不对其进行频繁调度，对调度对基本单位，不作为拥有资源的基本单位，线程（A thread）是CPU调度的最小单位")]),t._v(" "),n("p",[t._v("总结：")]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("引入线程之前：")]),t._v(" "),n("p",[t._v("进程是分配资源的基本单位和CPU调度的基本单位")]),t._v(" "),n("p",[t._v("引入线程之后：")]),t._v(" "),n("p",[t._v("线程作为CPU调度的基本单位，进程只作为其他资源分配单位")])]),t._v(" "),n("p",[t._v("进程和线程的关系：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n同一个进程可以有多个线程，一个线程与同属一个进程的其他线程共享当前进程的全部资源\n\n")])])]),n("p",[n("img",{attrs:{src:a(365),alt:""}})]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("注意：现在比较通用的叫法 单线程和多线程，前提都是指一个进程，核心是一个进程里面的单线程和多线程")])]),t._v(" "),n("h2",{attrs:{id:"_1-2-3-浏览器是多进程的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-浏览器是多进程的","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2.3.浏览器是多进程的")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("浏览器是多进程的，当你打开一个tab页，系统就给浏览器单独开启了一个进程\n")])])]),n("p",[t._v("Mac系统的活动监视器可以查看：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(366),alt:""}})]),t._v(" "),n("p",[t._v("也可以通过Chrome自带的任务管理器查看： 更多工具 -> 任务管理器")]),t._v(" "),n("p",[n("img",{attrs:{src:a(367),alt:""}})]),t._v(" "),n("p",[t._v("以谷歌浏览器为例，主要进程主要包括下面这些：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(368),alt:""}})]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Browser进程：\n浏览器的主进程（负责协调、主控），只有一个。\n它的作用是负责浏览器界面显示，与用户交互。如前进，后退等，负责各个页面的管理，创建和销毁其他进程，\n将Renderer进程得到的内存中的Bitmap（Bitmap可以理解为通过一个bit数组来存储特定数据的一种数据结构），\n绘制到用户界面上，网络资源的管理，下载等\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("第三方插件进程：当你安装插件并且运行了就会创建第三方插件进程\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GPU")]),t._v("进程：用来做"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("D绘制，一个浏览器只有一个"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GPU")]),t._v("进程\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("浏览器渲染进程"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 即浏览器内核，主要作用页面渲染，脚本执行，事件处理等，这是我们需要重点关注的\n")])])]),n("h2",{attrs:{id:"_1-3-浏览器内核"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-浏览器内核","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.3.浏览器内核")]),t._v(" "),n("p",[t._v("首先，需要重点强调的是，浏览器的渲染进程是多线程的")]),t._v(" "),n("p",[n("img",{attrs:{src:a(369),alt:""}})]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GUI")]),t._v("渲染线程的作用：负责渲染浏览器界面，解析"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTML")]),t._v("，"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CSS")]),t._v("，构建"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DOM")]),t._v("树和RenderObject树，布局和绘制等。\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("引擎线程"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("也称为"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JS")]),t._v("内核，负责处理Javascript脚本程序\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("事件触发线程"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 用来控制事件循环\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("定时触发器线程"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" setInterval与setTimeout所在线程\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("异步http请求线程"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("在XMLHttpRequest在连接后是通过浏览器新开一个线程请求")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ajax请求"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("h2",{attrs:{id:"_1-4-浏览器渲染流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-浏览器渲染流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.4.浏览器渲染流程")]),t._v(" "),n("p",[n("img",{attrs:{src:a(370),alt:""}})]),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",[t._v("注意：GUI渲染线程与JS引擎线程互斥，这就意味着JS会阻塞页面加载")])]),t._v(" "),n("h2",{attrs:{id:"_1-5-浏览器中的-event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-浏览器中的-event-loop","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.5.浏览器中的 Event Loop")]),t._v(" "),n("h3",{attrs:{id:"什么是执行栈？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是执行栈？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是执行栈？")]),t._v(" "),n("p",[t._v("栈结构遵循先进后出的原则，执行栈可以理解为存储函数调用的栈结构，例如：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("函数调用栈结构：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(371),alt:""}})]),t._v(" "),n("p",[t._v("平时在开发中，也可以看到执行栈，我们手动在代码中抛出错误")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"这是一个错误"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(372),alt:""}})]),t._v(" "),n("h3",{attrs:{id:"简单理解同步代码和异步代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单理解同步代码和异步代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 简单理解同步代码和异步代码")]),t._v(" "),n("p",[t._v("同步代码从上往下依次执行的")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("异步代码不是按顺序执行的")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("p",[t._v("再来理解一下概念，同步和异步实际上关注的是消息通信机制，同步就是再发出一个调用时，主动等待调用结果，而异步是相反的，在调用发出后，调用者不会立即得到结果，而是由被调用者通过状态、通知来通知调用者或者通过回调函数来处理，举个简单的例子，你打电话给一个女孩，问她喜不喜欢你，这个时候正好她非常喜欢你，马上就回复你了，这就是同步，如果这个女孩有些犹豫，需要思考一下，告诉你考虑好了再回复你，然后马上把电话挂了，等想好了以后她再打电话通知你，这种情况就是异步。")]),t._v(" "),n("p",[t._v("再通过，Node.js读取文件来理解同步和异步")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同步读取文件")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" resutl "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./test.html'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resutl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异步方式读取文件")]),t._v("\nfs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./test.html'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"什么是事件循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件循环","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是事件循环")]),t._v(" "),n("p",[t._v("事件循环即 Event loop，是js执行的一种机制，当主线程执行时，会产生一个执行栈，当执行栈中的代码运行时，如果调用了某些API，会在事件队列中添加各种事件，当栈中的代码执行完成后，会读取事件队列里面的事件，然后执行这些事件对应的回调函数")]),t._v(" "),n("p",[n("img",{attrs:{src:a(373),alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(374),alt:""}})]),t._v(" "),n("p",[t._v("演示工具地址："),n("a",{attrs:{href:"https://github.com/latentflip/loupe",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/latentflip/loupe"),n("OutboundLink")],1)]),t._v(" "),n("h2",{attrs:{id:"_1-6-弘任务和微任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-弘任务和微任务","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.6.弘任务和微任务")]),t._v(" "),n("p",[t._v("JS中分为两种任务类型：macrotask和microtask,在ES6规范中，microtask称为jobs，macrotask可称为task，macrotask（又称之为宏任务），可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行），每一个task会从头到尾将这个任务执行完毕，不会执行其它，浏览器为了能够使得JS内部task与DOM任务能够有序的执行，会在一个task执行结束后，在下一个 task 执行开始前，对页面进行重新渲染，总结来说，就是两个宏任务之间浏览器会进行渲染")]),t._v(" "),n("p",[t._v("microtask（又称为微任务），可以理解是在当前 task 执行结束后立即执行的任务，也就是说，在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）")]),t._v(" "),n("p",[t._v("JS执行流程总结：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1.执行一个宏任务(没有就从事件队列中去取)\n\n2.执行过程中如果遇到微任务，就将它添加到微任务队列中\n\n3.宏任务完成后，清空微任务队列里面到微任务\n\n4.开始检查渲染，GUI线程接管渲染\n\n5.渲染完成后，JS引擎接管，开始继续执行下一个宏任务（从事件队列中去取）\n")])])]),n("p",[n("img",{attrs:{src:a(375),alt:""}})])])},[],!1,null,null,null);s.default=e.exports}}]);